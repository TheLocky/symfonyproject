<?php
namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * @ORM\Entity
 * @ORM\Table(name="steamgames")
 */
class SteamGame
{
	/**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

	/**
     * @ORM\Column(type="string", length=100)
     */
	protected $name;

	/**
     * @ORM\Column(type="string", length=256)
     */
	protected $image;

	/**
     * @ORM\Column(type="date", length=100)
     */
	protected $date;

	/**
     * @ORM\Column(type="string", length=100)
     */
	protected $developer;

	/**
     * @ORM\Column(type="string", length=256)
     */
	protected $website;

    /**
     * @ORM\Column(type="decimal", name="price", nullable=false, scale=2, precision=10)
     */
    protected $price;

    /**
     * @ORM\ManyToMany(targetEntity="GameCategory", inversedBy="games")
     * @ORM\JoinTable(
     *  name="game_category",
     *  joinColumns={
     *      @ORM\JoinColumn(name="game_id", referencedColumnName="id")
     *  },
     *  inverseJoinColumns={
     *      @ORM\JoinColumn(name="category_id", referencedColumnName="id")
     *  }
     * )
     */
    protected $categories;

    public function __construct() 
    {
        $categories = new ArrayCollection();
    }
    
    /**
     * @param GameCategory $category
     */
    public function addCategory(GameCategory $category)
    {
        if ($this->categories->contains($category)) {
            return;
        }
        $this->categories->add($category);
        $category->addGame($this);
    }

    /**
     * @param GameCategory $category
     */
    public function removeCategory(GameCategory $category)
    {
        if (!$this->categorys->contains($category)) {
            return;
        }
        $this->categorys->removeElement($category);
        $category->removegame($this);
    }


    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return SteamGame
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set website
     *
     * @param string $website
     *
     * @return SteamGame
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Get website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Get categories
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCategories()
    {
        return $this->categories;
    }

    /**
     * Set image
     *
     * @param string $image
     *
     * @return SteamGame
     */
    public function setImage($image)
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Get image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Set date
     *
     * @param \DateTime $date
     *
     * @return SteamGame
     */
    public function setDate($date)
    {
        $this->date = $date;

        return $this;
    }

    /**
     * Get date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Set developer
     *
     * @param string $developer
     *
     * @return SteamGame
     */
    public function setDeveloper($developer)
    {
        $this->developer = $developer;

        return $this;
    }

    /**
     * Get developer
     *
     * @return string
     */
    public function getDeveloper()
    {
        return $this->developer;
    }

    /**
     * Set price
     *
     * @param string $price
     *
     * @return SteamGame
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->price;
    }
}
